package Stack;

import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

public class ValidateBrackets {
    /**
     * Разработайте программу на Java для проверки правильности скобочной последовательности.
     * Правильная скобочная последовательность должна удовлетворять следующим критериям:
     * Каждой открывающей скобке ((, [, {) должна соответствовать закрывающая скобка того же типа (), ], }).
     * Закрывающая скобка должна следовать после своей открывающей пары.
     * Скобки должны быть правильно вложены друг в друга.
     *
     * Реализация
     *
     * Используйте стек для отслеживания открывающих скобок. При обходе строки, помещайте в стек все открывающие скобки.
     * При встрече закрывающей скобки проверьте, соответствует ли она верхнему элементу
     * стека (последней открывающей скобке). Если соответствует, извлеките элемент из стека.
     * В противном случае, последовательность скобок неверная.
     * После обработки всей строки, если стек пуст, последовательность верная.
     * Если в стеке остались элементы, последовательность неверная.
     */

    public static void main(String[] args) {

    }
    public static boolean validateBrackets(String str) {
        // создаю мапу для того чтобы зависть словари необходимых символов
        Map<Character, Character> brackets = new HashMap<>();

        brackets.put(')', '(');
        brackets.put(']', '[');
        brackets.put('}', '{');


        Stack<Character> stack = new Stack<>();
        //в цикле for-each преобразую строку в массив символов
        for (Character ch : str.toCharArray()) {
            if (brackets.containsValue(ch)) {
                stack.push(ch);// проверяем открывающуюся скобку
            } else if (brackets.containsKey(ch)) { // проверяем закрывающуюся скобку
                if (stack.isEmpty() || stack.pop() != brackets.get(ch)) {//скобочная последовательности не правильная
                    return false;
                }
            }
        }

        return stack.isEmpty(); // Если стек пуст, последовательность валидна
    }
}
